# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from sf.substreams.v1 import substreams_pb2 as sf_dot_substreams_dot_v1_dot_substreams__pb2


class StreamStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Blocks = channel.unary_stream(
        '/sf.substreams.v1.Stream/Blocks',
        request_serializer=sf_dot_substreams_dot_v1_dot_substreams__pb2.Request.SerializeToString,
        response_deserializer=sf_dot_substreams_dot_v1_dot_substreams__pb2.Response.FromString,
        )


class StreamServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Blocks(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StreamServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Blocks': grpc.unary_stream_rpc_method_handler(
          servicer.Blocks,
          request_deserializer=sf_dot_substreams_dot_v1_dot_substreams__pb2.Request.FromString,
          response_serializer=sf_dot_substreams_dot_v1_dot_substreams__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sf.substreams.v1.Stream', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
